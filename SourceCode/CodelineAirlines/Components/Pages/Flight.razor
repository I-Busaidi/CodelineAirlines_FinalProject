@page "/flights"
@inject IFlightService flightService
@inject NavigationManager NavManager
@attribute [AllowAnonymous]
@using MudBlazor

<MudContainer Class="carousel-container">
    <MudCarousel Class="mud-carousel" Style="height:500px; width: 100vw;" TData="object" AutoCycle="true" Interval="5000" ShowArrows="false" ShowBullets="true" BulletColor="Color.Orange">
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Transparent">
            <MudImage Src="/Images/backgroundCarousel2.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h1 class="text-title">Explore the Skies</h1>
                <p class="text-subtitle">Seamless Booking for Your Dream Destinations</p>
            </div>
        </MudCarouselItem>
    </MudCarousel>
</MudContainer>

<MudContainer Class="flights-container">
    <h2 class="section-title">Available Flights</h2>

    <MudExpansionPanels Class="flight-panels">
        @if (flights != null && flights.Any())
        {
            @foreach (var flight in flights)
            {
                <MudExpansionPanel Class="flight-panel" Text="@($"{flight.SourceAirportName} → {flight.DestinationAirportName} | {flight.ScheduledDepartureDate.ToString("dd MMM yyyy, HH:mm")}")">
                    <MudPaper Class="flight-details" Elevation="6">
                        <MudGrid>
                            <MudItem xs="8">
                                <MudText Typo="Typo.subtitle1" Color="Color.Primary"><b>Flight Number:</b> @flight.FlightNo</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Origin:</b> @flight.SourceAirportName</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Destination:</b> @flight.DestinationAirportName</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Departure:</b> @flight.ScheduledDepartureDate.ToString("HH:mm")</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Arrival:</b> @flight.ScheduledArrivalDate.ToString("HH:mm")</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="text-right">
                                <MudText Typo="Typo.subtitle1" Class="mb-2" Color="Color.Warning"><b>Price:</b> @flight.Cost OMR</MudText>
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => NavigateToBooking(flight.FlightNo.ToString())" Class="book-button">
                                    BOOK NOW
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudExpansionPanel>
            }
        }
        else
        {
            <MudExpansionPanel Text="No flights available">
                <MudText Color="Color.Secondary" Typo="Typo.body2">No flights available</MudText>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudContainer>

@code {
    public string? Origin = null;
    public string? Dest = null;
    public DateTime? startDate = null;
    public DateTime? endDate = null;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        Origin = queryParams["origin"];
        Dest = queryParams["dest"];
        if (queryParams["startdate"] != null && DateTime.TryParse(queryParams["startdate"], out var parsedStartDate))
        {
            startDate = parsedStartDate;
        }

        if (queryParams["enddate"] != null && DateTime.TryParse(queryParams["enddate"], out var parsedEndDate))
        {
            endDate = parsedEndDate;
        }

        if (Origin != null && Dest != null && startDate != null && endDate != null)
        {
            GetFilteredFlights();
        }
        else
        {
            GetFlights();
        }
    }
    private List<FlightOutputDTO> flights { get; set; }

    private void GetFilteredFlights()
    {
        flights = flightService.GetAllFlights().Where(f => 
            f.SourceAirportName == Origin && 
            f.DestinationAirportName == Dest &&
            f.ScheduledDepartureDate >= startDate && 
            f.ScheduledDepartureDate <= endDate && 
            (f.Status == "Scheduled" || f.Status == "ReScheduled")).ToList();
    }

    private void GetFlights()
    {
        flights = flightService.GetAllFlights().Where(f => f.Status == "Scheduled" || f.Status == "ReScheduled").ToList();
    }

    private void NavigateToBooking(string flightNo)
    {
        NavManager.NavigateTo($"/book-flight/{flightNo}");
    }
}


<style>
    body {
        margin-top: -64px;
        height: 100vh;
        background: #ffffff;
    }

    .carousel-container {
        padding: 0;
        margin: 0;
        background: linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.1));
    }

    .carousel-image {
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        width: 100%;
        height: 500px;
    }

    .text-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: white;
    }

    .text-title {
        font-size: 2.8rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
        color: #FFA500;
    }

    .text-subtitle {
        font-size: 1.6rem;
        margin-top: 10px;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.8);
    }

    .flights-container {
        margin: -80px auto 50px;
        padding: 30px;
        max-width: 1200px;
        background: white;
        border-radius: 15px;
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.15);
        z-index: 10;
        position: relative;
    }

    .section-title {
        font-size: 2.2rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 20px;
        color: #1E3A8A;
    }

    .flight-panels {
        border-radius: 10px;
        overflow: hidden;
    }

    .flight-panel {
        background: #f9f9f9;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        margin-bottom: 10px;
        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.05);
    }

        .flight-panel .mud-expand-icon {
            color: #1E3A8A;
        }

    .flight-details {
        padding: 20px;
        border-radius: 10px;
        background: #ffffff;
        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

        .flight-details:hover {
            transform: scale(1.02);
        }

    .mud-carousel {
        border-radius: 0 0 20px 20px;
        overflow: hidden;
    }

    .book-button {
        background: #FFA500;
        color: white;
        font-weight: bold;
    }

        .book-button:hover {
            background: #cc8400;
        }
</style>
