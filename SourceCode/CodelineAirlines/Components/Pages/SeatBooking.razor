@page "/seatBooking"

@inject NavigationManager NavigationManager
@inject IAirplaneSpecService airplaneSpecService
@inject ICompoundService compoundService
@inject IMapper mapper
@inject IFlightService flightService
@inject SeatSelectionService SeatSelectionService
@inject AppState appState

@attribute [Authorize(Roles = "user")]

<MudDrawerContainer>
    <MudDrawer Open="true" Anchor="Anchor.End" Elevation="1" OverlayAutoClose="false" Class="fixed-drawer" Style="height:90%; width: 15%; color:#546E7A">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Selected Seats</MudText>
        </MudDrawerHeader>
        <MudCard Class="drawerCard">
            <MudCardContent>
                <MudList T="string">
                    @foreach (var seat in selectedSeats)
                    {
                        var seatDTO = mapper.Map<SeatsOutputDTO>(seat);
                        string text = $"{seatDTO.SeatNumber} | {seatDTO.Type} | {seatDTO.SeatLocation}";
                        <MudListItem Text="@text" Icon="@Icons.Material.Filled.EventSeat" />
                        <MudDivider DividerType="DividerType.FullWidth" Light/>
                    }
                </MudList>
            </MudCardContent>
            <MudCardActions Style="align-self: center;">
                <MudButton Color="Color.Primary" OnClick="@ConfirmSeats" Disabled = "@notValidSeats">Confirm</MudButton>
                <MudButton Color="Color.Secondary" OnClick="@GoBack">Return</MudButton>
            </MudCardActions>
        </MudCard>
    </MudDrawer>
    <MudMainContent Class="carousel-section">
        <MudText Typo="Typo.h6">First Class</MudText>
        <MudCarousel Class="mud-width-full" Style="height:200px; color:#546E7A" ShowArrows="false" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
            <MudCarouselItem Transition="Transition.Fade" Color="@Color.Primary">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/first1.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Fade" Color="@Color.Secondary">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/first2.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Fade">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/first3.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
        </MudCarousel>
        <MudDivider DividerType="DividerType.FullWidth" Light Style="margin-top: 4%;"/>
        <MudText Typo="Typo.h6" Style="margin-top: 6%;">Business Class</MudText>
        <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="false" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
            <MudCarouselItem Transition="Transition.Fade" Color="@Color.Primary">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/busi1.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Fade" Color="@Color.Secondary">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/busi2.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Fade">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/busi3.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
        </MudCarousel>
        <MudDivider DividerType="DividerType.FullWidth" Light Style="margin-top: 4%;" />
        <MudText Typo="Typo.h6" Style="margin-top: 6%;">Economy</MudText>
        <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="false" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
            <MudCarouselItem Transition="Transition.Fade" Color="@Color.Primary">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/eco1.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Fade" Color="@Color.Secondary">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/eco2.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Fade">
                <div class="d-flex" style="height:100%">
                    <MudImage Src="/Images/eco3.jpg" Class="carousel-image" />
                </div>
            </MudCarouselItem>
        </MudCarousel>
    </MudMainContent>
    <MudMainContent Class="seat-map" Style="color:#546E7A">
        <div class="seat-layout">
            
            <MudText Typo="Typo.h5"> Select Seats</MudText>
            <MudDivider />
            @foreach (var seatClass in seatLayoutByClass)
            {
                <div class="seat-class">
                    <MudText Typo="Typo.h6" Style="text-align:center">@seatClass.Key</MudText>
                    @foreach (var row in seatClass.Value)
                    {
                        <div class="seat-row">
                            @foreach (var seat in row)
                            {
                                var seatClassName = $"seat-icon {GetSeatClass(seat.SeatLocation)} {(IsSeatAvailable(seat.SeatNumber) ? "" : "unavailable-seat")}";

                                @if (seat.SeatLocation == -1)
                                {
                                    <div class="aisle"></div>
                                }
                                else
                                {
                                    <MudToggleIconButton Toggled="@GetSeatStatus(seat.SeatNumber)"
                                                         ToggledChanged="@(value => UpdateSeatStatus(seat, value))"
                                                         Icon="@Icons.Material.Filled.EventSeat"
                                                         Color="Color.Default"
                                                         ToggledIcon="@Icons.Material.Filled.EventSeat"
                                                         ToggledColor="Color.Warning"
                                                         Disabled="!IsSeatAvailable(seat.SeatNumber)"
                                                         Class="@seatClassName" />
                                }
                            }
                        </div>
                    }
                </div>
                <MudDivider DividerType="DividerType.FullWidth" Light />
            }
        </div>
    </MudMainContent>
</MudDrawerContainer>

@code {
    private bool drawerOpen = true; // Controls drawer visibility
    private List<SeatsOutputDTO> availableSeats = new List<SeatsOutputDTO>();
    private List<SeatTemplate> selectedSeats = new(); // Stores selected seats
    private int flightNo { get; set; }
    private Airplane airplane { get; set; }
    private bool notValidSeats = true;
    private AirplaneSpecs airplaneSpecs { get; set; }
    private List<SeatTemplate> seats = new List<SeatTemplate>();
    private List<(SeatTemplate seat, bool status)> seatStatuses = new List<(SeatTemplate seat, bool status)>();
    private Dictionary<string, List<List<SeatTemplate>>> seatLayoutByClass = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        flightNo = int.Parse(queryParams["flightNo"]);

        var flight = flightService.GetFlightByIdWithRelatedData(flightNo);

        airplane = flight.Airplane;

        airplaneSpecs = airplaneSpecService.GetSpecsByModelWithRelatedData(airplane.AirplaneModel);

        if (airplaneSpecs?.Seats != null)
        {
            availableSeats = compoundService.GetAvailableSeats(flightNo);
            seats = airplaneSpecs.Seats.OrderBy(s => int.Parse(new string(s.SeatNumber.TakeWhile(char.IsDigit).ToArray()))).ToList();

            // Initialize seatStatuses
            foreach (var seat in seats)
            {
                seatStatuses.Add((seat, false));
            }

            // Group seats by type (First Class, Business, Economy) and sort order
            var seatsByClass = seats.GroupBy(s => s.Type)
                                    .OrderBy(s => GetClassPriority(s.Key));

            // Organize layout for each class
            foreach (var seatClass in seatsByClass)
            {
                var classLayout = new List<List<SeatTemplate>>();

                // Group seats into rows based on SeatNumber
                var rows = seatClass.GroupBy(s => int.Parse(new string(s.SeatNumber.TakeWhile(char.IsDigit).ToArray())));

                foreach (var row in rows)
                {
                    var rowSeats = new List<SeatTemplate>();
                    int lastSeatLocation = -1;
                    foreach (var seat in row.OrderBy(s => s.SeatNumber))
                    {
                        // Add an aisle if there's a gap between seat locations
                        if (lastSeatLocation == 1 && seat.SeatLocation == 1)
                        {
                            rowSeats.Add(new SeatTemplate { SeatLocation = -1 });
                        }

                        rowSeats.Add(seat);
                        lastSeatLocation = seat.SeatLocation;
                    }

                    classLayout.Add(rowSeats);
                }
                seatLayoutByClass[seatClass.Key] = classLayout;
            }

            Console.WriteLine($"Initialized seat layout for {seatLayoutByClass.Count} classes.");
        }
    }

    private int GetClassPriority(string seatClass)
    {
        return seatClass switch
        {
            "First Class" => 1,
            "Business" => 2,
            "Economy" => 3,
            _ => 4
        };
    }

    private void UpdateSeatStatus(SeatTemplate seat, bool status)
    {
        if (status)
        {
            if (selectedSeats.Count < appState.PassengersInput.Count)
            {
                selectedSeats.Add(seat);
            }
        }
        else
        {
            selectedSeats.RemoveAll(s => s.SeatNumber == seat.SeatNumber);
            if(selectedSeats.Count < 1)
            {
                drawerOpen = false;
            }
        }
        if (selectedSeats.Count == appState.PassengersInput.Count)
        {
            notValidSeats = false;
        }
        else
        {
            notValidSeats = true;
        }
        drawerOpen = true; // Open drawer when seats are selected
    }

    private bool GetSeatStatus(string seatNumber)
    {
        return selectedSeats.Any(s => s.SeatNumber == seatNumber);
    }

    private bool IsSeatAvailable(string seatNumber)
    {
        return availableSeats.Any(seat => seat.SeatNumber == seatNumber);
    }

    private void ConfirmSeats()
    {
        SeatSelectionService.SetSelectedSeats(selectedSeats);
        NavigationManager.NavigateTo($"/confirmBooking/{flightNo}");
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/flights");
    }

    private string GetSeatClass(int seatLocation)
    {
        return seatLocation switch
        {
            0 => "window-seat",
            1 => "aisle-seat",
            2 => "middle-seat",
            _ => "unknown-seat"
        };
    }
}


<style>
    body {
        background: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.1)), url('/images/seatmap.jpg');
        background-size: cover;
        background-position: center;
        height: 100vh;
    }

    .unavailable-seat {
        background-color: #b0bec5; /* Light grey for unavailable seats */
        cursor: not-allowed; /* Show a "not allowed" cursor */
        opacity: 0.6; /* Make it look faded */
    }

    .carousel-section {
        position: fixed;
        width: 18%;
        height: 90%;
        top: 75px;
        left: 25px;
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
        padding: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        backdrop-filter:blur(15px);
    }

    .carousel img {
        width: 100%;
        height: auto;
        border-radius: 10px;
    }

    .seat-map {
        position: fixed !important;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        left: 25%;
        right: 25%;
        backdrop-filter: blur(15px);
        color: black;
        padding: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        overflow-y: auto;
        height: 90%;
        width: 50%;
    }
    .seat-layout 
    {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin: 20px auto;
        width: 700px;
        padding: 50px;
        border-left: solid;
        border-right: solid;
        border-color: #FFB74D;
        border-radius: 10px;
        background-color: rgba(255, 255, 255, 1);

    }

    .drawerCard{
        flex-grow: 1; /* Fills remaining space after actions */
        overflow-y: auto; /* Enables scrolling if content exceeds height */
        background-color: rgba(255, 255, 255, 0.9);
    }

    .fixed-drawer {
        position: fixed !important;/* Keeps the drawer fixed */
        top: 75px; /* Offset to allow space for a header/navbar */
        margin-right: 25px; /* Adds spacing from the right edge */
        z-index: 1050; /* Keeps it above other elements */
        overflow-y: auto; /* Allows scrolling for content overflow */
        border-radius: 10px; /* Smooth rounded corners */
        backdrop-filter: blur(15px);
        background-color: rgba(255, 255, 255, 0.1); /* Match MudBlazor theme */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Optional: Adds subtle shadow */
        padding: 10px; /* Adds inner spacing for better content display */
    }

    .seat-class {
        margin-bottom: 30px;
    }

    .seat-row {
        display: flex;
        justify-content: space-evenly; /* Center-align seats */
        gap: 10px; /* Space between groups of seats and aisles */
        margin-bottom: 1px;
    }

    .layout-container {
        display: flex;
        gap: 20px;
        height: 100%;
    }

    .seat-icon {
        width: 40px;
        height: 40px;
        background-color: #ccc;
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: white;
    }

    .carousel-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    .window-seat {
        background-color: #3949AB;
    }

    .aisle-seat {
        background-color: #303F9F;
    }

    .middle-seat {
        background-color: #1A237E;
    }

    .aisle {
        width: 20px;
        background-color: #FFD180;
    }
</style>
