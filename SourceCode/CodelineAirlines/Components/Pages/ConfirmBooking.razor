@page "/confirmBooking/{flightNo}"

@inject NavigationManager NavigationManager
@inject IAirplaneSpecService airplaneSpecService
@inject IHttpContextAccessor HttpContextAccessor
@inject IPassengerService passengerService
@inject IUserService userService
@inject IMapper mapper
@inject IFlightService flightService
@inject SeatSelectionService SeatSelectionService
@inject AppState appState
@inject IBookingService bookingService

@attribute [Authorize(Roles = "user")]

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Checkout</MudText>
    <MudGrid Spacing="12" Class="mt-16">
        <MudItem xs="7">
            <MudText Typo="Typo.h5" GutterBottom="true">Booking info</MudText>
            <MudGrid>
            @foreach(var booking in bookings)
            {
            
                <MudItem xs="12">
                    <MudTextField T="int" ReadOnly="true" Label="Flight Number" Value="@booking.FlightNo"/>
                </MudItem>
                <MudItem xs="12">
                        <MudTextField T="string" ReadOnly="true" Label="Passenger Passport" Value="@booking.PassengerPassport" />
                </MudItem>
                <MudItem xs="6">
                        <MudTextField T="string" ReadOnly="true" Label="Class" Value="@booking.Class" />
                </MudItem>
                <MudItem xs="6">
                        <MudTextField T="string" ReadOnly="true" Label="Seat Number" Value="@booking.SeatNo" />
                </MudItem>
                <MudItem xs="12">
                        <MudSelect T="string" @bind-Value="@booking.Meal"
                               Variant="Variant.Filled"
                               Label="Meal"
                               Margin="Margin.Normal"
                               Dense="false"
                               Disabled="false"
                               ReadOnly="false"
                               Placeholder="Select meal"
                               Clearable="false"
                               Required="true">
                        @foreach (var meal in meals)
                        {
                            <MudSelectItem Value="meal">@meal</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                
            
            }
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Size="Size.Large" Class="mt-8" OnClick="ConfirmBookings">Confirm Booking</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="5">
            <MudText Typo="Typo.h5" GutterBottom="true"></MudText>
            <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
                <MudList T="string">
                    @foreach (var passenger in appState.PassengersInput)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.Person">
                            <div class="d-flex">
                                <MudText>@passenger.PassengerName</MudText>
                                <MudText HtmlTag="span" Class="ml-auto">@passenger.Passport</MudText>
                            </div>
                        </MudListItem>
                    }
                </MudList>
               
                <MudList T="string">
                    @foreach (var seat in SeatSelectionService.SelectedSeats)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.EventSeat">
                            <div class="d-flex">
                                <MudText>@seat.Type</MudText>
                                <MudText HtmlTag="span" Class="ml-auto">@seat.SeatNumber</MudText>
                            </div>
                        </MudListItem>
                    }
                </MudList>
                <div class="mt-auto">
                    <MudDivider />
                    <div class="d-flex pa-4">
                        <MudText>Total:</MudText>
                        <MudText Class="ml-auto"><b>@totalPrice</b></MudText>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Parameter]
    public string flightNo { get; set; }
    public List<BookingDTO> bookings = new List<BookingDTO>();
    public string[] meals = new string[5] { "Vegiterian", "Low fat", "Gluten-free", "Oriental", "Seafood" };
    public Models.Flight flight = new Models.Flight();
    public decimal totalPrice = 0;
    public User user = new User();
    const decimal EconomyClassPercentage = 0.00m; // 0% for Economy
    const decimal BusinessClassPercentage = 0.05m; // 5% for Business
    const decimal FirstClassPercentage = 0.10m; // 10% for First Class
    const decimal SeatSelectionPercentage = 0.03m; // 3% for seat selection
    private string? Token;
    protected override void OnInitialized()
    {
        Token = HttpContextAccessor.HttpContext?.Request.Cookies["authToken"];
        if (!string.IsNullOrWhiteSpace(Token))
        {
            var claims = JwtHelper.GetClaimsFromToken(Token);
            if (claims != null)
            {
                int userId = int.Parse(claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
                if (userId > 0)
                {
                    user = userService.GetUserByIdWithRelatedData(userId);
                }
            }
        }

        flight = flightService.GetFlightByIdWithRelatedData(int.Parse(flightNo));

        if (appState.PassengersInput.Count == SeatSelectionService.SelectedSeats.Count)
        {
            for (int i = 0; i < appState.PassengersInput.Count; i++)
            {
                bookings.Add(new BookingDTO
                    {
                        PassengerPassport = appState.PassengersInput[i].Passport,
                        FlightNo = int.Parse(flightNo),
                        Class = SeatSelectionService.SelectedSeats[i].Type,
                        SeatNo = SeatSelectionService.SelectedSeats[i].SeatNumber,
                        LoyaltyPointsToUse = 0
                    });
                totalPrice += flight.Cost;
                if (SeatSelectionService.SelectedSeats[i].Type == "First Class")
                {
                    totalPrice += totalPrice * FirstClassPercentage;
                }
                else if (SeatSelectionService.SelectedSeats[i].Type == "Business")
                {
                    totalPrice += totalPrice * BusinessClassPercentage;
                }
                totalPrice += totalPrice * SeatSelectionPercentage;
            }
        }
    }

    public void ConfirmBookings()
    {
        foreach(var booking in bookings)
        {
            var passenger = passengerService.GetPassengerByPassport(booking.PassengerPassport);
            if(passenger == null)
            {
                passengerService.AddPassenger(appState.PassengersInput.FirstOrDefault(p => p.Passport == booking.PassengerPassport), user.UserId, false);
            }
            bookingService.BookFlight(booking);
        }
        NavigationManager.NavigateTo("/bookings");
    }
}