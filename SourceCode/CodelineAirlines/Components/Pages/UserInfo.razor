@page "/Profile"

@inject IPassengerService PassengerService
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IAuthService authService
@inject IUserService userService
@inject IPassengerService passengerService
@* @attribute [Authorize(Roles = "user")] *@
<div class="page-container">

    <!-- Users Table -->
    <MudContainer Class="form-container">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <!-- Email Field -->
                    <MudItem xs="12" sm="6" Class="field-container">
                        <MudGrid AlignItems="Center">
                            <MudItem xs="4" Class="field-label">
                                <MudText Typo="Typo.subtitle1"><strong>Email:</strong></MudText>
                            </MudItem>
                            <MudItem xs="8" Class="field-value">
                                <MudText Typo="Typo.body1">@user.UserEmail</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudItem>


                    <!-- Name Field -->
                    <MudItem xs="12" sm="6" Class="field-container">
                        <MudGrid AlignItems="Center">
                            <MudItem xs="4" Class="field-label">
                                <MudText Typo="Typo.subtitle1"><strong>Name:</strong></MudText>
                            </MudItem>
                            <MudItem xs="8" Class="field-value">
                                <MudText Typo="Typo.body1">@user.UserName</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudItem>

        

                    
                </MudGrid>
            </MudCardContent>
        </MudCard>
    

    <MudText Typo="Typo.h4" Class="mb-4">Passenger List</MudText>

    <!-- Passenger List -->
    <MudExpansionPanels>
        @if (passengers != null && passengers.Any())
        {
            @foreach (var passenger in passengers)
            {
                <MudExpansionPanel Text="@($"{passenger.PassengerName} → {passenger.Nationality}")">
                    <MudPaper Class="pa-4">
                        <MudGrid>
                            <MudItem xs="8">
                                <MudText Typo="Typo.subtitle1"><b>Passenger Name:</b> @passenger.PassengerName</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Passport:</b> @passenger.Passport</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Gender:</b> @passenger.Gender</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Birth Date:</b> @passenger.BirthDate.ToString("dd/MM/yyyy")</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Nationality:</b> @passenger.Nationality</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Loyalty Points:</b> @passenger.LoyaltyPoints</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="text-right">
                                <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary">
                                    BOOK NOW
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudExpansionPanel>
            }
        }
        else
        {
            <MudExpansionPanel Text="No passenger found">
                <MudText Color="Color.Secondary" Typo="Typo.body2">No passengers available at the moment.</MudText>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
    </MudContainer>
</div>


@code {
    public int userId { get; set; }
    private List<PassengerOutputDTO> passengers = new List<PassengerOutputDTO>();
    private string? Token;
    // Users List

    private User user = new User();

    private void EditUser()
    {
        // Add logic for editing the user
        Console.WriteLine("Edit user clicked.");
    }

    

    // Grid Settings
    private bool _readOnly = false;
    private bool _isCellEditMode = true;
    private bool _editTriggerRowClick = true;

    // Initialization
    protected override void OnInitialized()
    {
        GetPassengerProfile();
    }

    private void GetPassengerProfile()
    {
        Token = HttpContextAccessor.HttpContext?.Request.Cookies["authToken"];
        if (!string.IsNullOrWhiteSpace(Token))
        {
            var claims = JwtHelper.GetClaimsFromToken(Token);
            if (claims != null)
            {
                userId = int.Parse(claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
                user = userService.GetUserByIdWithRelatedData(userId);
                passengers = passengerService.GetPassengerProfile(userId);
            }
        }
    }
    
}



