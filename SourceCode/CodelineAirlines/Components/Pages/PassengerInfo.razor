@page "/book-flight"
@page "/book-flight/{FlightNo}"
@inject NavigationManager NavManager
@using MudBlazor
    @using System.ComponentModel.DataAnnotations

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6" Style="min-height: 100vh;">
    <MudText Typo="Typo.h4" Class="mb-6 text-center">Book Flight @FlightNo</MudText>

    <!-- Flexbox Layout -->
    <div class="d-flex justify-content-between align-items-start" style="min-height: 100vh;">
        <!-- Left: Passenger Information Form (Smaller Size) -->
        <MudPaper Class="pa-4 mb-8 w-40" Elevation="4" Style="height: 100%;">
            <EditForm Model="@model" OnValidSubmit="AddPassenger">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.h5" Class="mb-4">Passenger Information</MudText>

                <!-- Passenger Name -->
                <MudTextField Label="Passenger Name" @bind-Value="model.PassengerName" Required="true" Class="mb-3" />

                <!-- Passport Number -->
                <MudTextField Label="Passport Number" @bind-Value="model.Passport" Required="true" Class="mb-3" />

                <!-- Gender -->
                <MudSelect T="string" Label="Gender" @bind-Value="model.Gender" Required="true" Class="mb-3">
                    <MudSelectItem Value="@gender[0]">Male</MudSelectItem>
                    <MudSelectItem Value="@gender[1]">Female</MudSelectItem>
                </MudSelect>

                <!-- Birth Date -->
                <MudDatePicker Label="Date of Birth" @bind-Date="model.BirthDate" Required="true" Class="mb-3" />

                <!-- Nationality -->
                <MudTextField Label="Nationality" @bind-Value="model.Nationality" Required="true" Class="mb-3" />

                <MudText Typo="Typo.h6" Class="mt-4 mb-4">Selected Flight: @FlightNo</MudText>

                <!-- Buttons -->
                <MudItem xs="12" Class="d-flex justify-center mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" ButtonType="ButtonType.Submit" Size="Size.Medium">Add Passenger</MudButton>
                    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Tertiary" Class="mx-2">CHOOSE YOUR SEAT</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Class="mx-2" OnClick="NavigateBack" Size="Size.Medium">Cancel</MudButton>
                </MudItem>
            </EditForm>
        </MudPaper>

        <!-- Right: Passenger List -->
        <div class="w-50" style="max-height: 80vh; overflow-y: auto;">
            <MudText Typo="Typo.h5" Class="mb-4 text-center">Passenger List</MudText>
            @if (passengerList.Count > 0)
            {
                <MudTable Items="passengerList" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Passport</MudTh>
                        <MudTh>Gender</MudTh>
                        <MudTh>Birth Date</MudTh>
                        <MudTh>Nationality</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.PassengerName</MudTd>
                        <MudTd>@context.Passport</MudTd>
                        <MudTd>@context.Gender</MudTd>
                        <MudTd>@context.BirthDate?.ToString("dd/MM/yyyy")</MudTd>
                        <MudTd>@context.Nationality</MudTd>
                        <MudTd>
                            <MudButton Icon="Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemovePassenger(context))">Remove</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">No passengers added yet.</MudText>
            }
        </div>
    </div>
</MudContainer>

<MudSnackbarProvider />
@code {

    [Parameter]
    public string FlightNo { get; set; }
    bool success;
    public string[] gender = new string[2] { "Male", "Female" };
    private PassengerInputDTO model = new PassengerInputDTO();
    private List<PassengerInputDTO> passengerList = new();

    private void AddPassenger(EditContext context)
    {
        success = true;
        // Add the current passenger to the list
        passengerList.Add(new PassengerInputDTO
            {
                PassengerName = model.PassengerName,
                Passport = model.Passport,
                Gender = model.Gender,
                BirthDate = model.BirthDate,
                Nationality = model.Nationality
            });

        // Clear the form by resetting the current passenger object
        model = new PassengerInputDTO(); // Clears the form fields for new entry

        // Force UI to re-render to show updated list
        StateHasChanged();
    }

    private void RemovePassenger(PassengerInputDTO passenger)
    {
        passengerList.Remove(passenger);
        StateHasChanged(); // Ensure UI updates when a passenger is removed
    }

    private void NavigateBack()
    {
        NavManager.NavigateTo("/flights");
    }

    public class PassengerInputDTO
    {
        [Required]
        public string PassengerName { get; set; }
        [Required]
        public string Passport { get; set; }
        [Required]
        public string Gender { get; set; }
        [Required]
        public DateTime? BirthDate { get; set; }
        [Required]
        public string Nationality { get; set; }
    }
}
