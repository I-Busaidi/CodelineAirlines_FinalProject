@page "/"

@inject IFlightService flightService
@inject IAirportService airportService
@inject NavigationManager navManager
@attribute [AllowAnonymous]
<PageTitle>Home</PageTitle>
<!-- Carousel Section -->
<MudContainer Class="carousel-container">
    <MudCarousel Class="mud-carousel" Style="height:500px; width: 100vw; " TData="object">
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic1.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>The sky is not the limit, it’s just the beginning.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic2.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>Legends On Board.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic3.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>See the World Differently.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic5.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>The better way to fly.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic6.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>The world's favourite airline.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic7.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>Making it easier to get there.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic8.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>Great people. Great seats. Great service.</h2>
            </div>
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Fade" Color="@Color.Primary">
            <MudImage Src="/Images/LandscapePic9.jpg" Class="carousel-image" />
            <div class="text-overlay">
                <h2>On Time, Every Time.</h2>
            </div>
        </MudCarouselItem>
    </MudCarousel>
</MudContainer>
<MudContainer Class="search-wrapper">
    <MudContainer Class="search-section">
        <MudGrid Gutter="2" AlignItems="Center" JustifyContent="SpaceBetween">
            <!-- From Section -->
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="AirportOutputDTO"
                           Value="FromLocation"
                           Variant="Variant.Filled"
                           Label="Origin"
                           Margin="Margin.None"
                           Dense="false"
                           Disabled="false"
                           ReadOnly="false"
                           Placeholder="Select origin"
                           ValueChanged="OnOriginSelected">
                           
                    @foreach (var airport in airportsOrigin)
                    {
                        string choiceItem = $"{airport.City}, {airport.Country}, {airport.AirportName}";
                        <MudSelectItem Value="airport">@choiceItem</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Where To Section -->
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="AirportOutputDTO"
                           Value="ToLocation"
                           Variant="Variant.Filled"
                           Label="Destination"
                           Margin="Margin.None"
                           Dense="false"
                           ReadOnly="false"
                           Disabled="@originEmpty"
                           Placeholder="@("Select Destination")"
                           ValueChanged="OnDestSelected">
                    @foreach (var airport in airportsDest)
                    {
                        string choiceItem = $"{airport.City}, {airport.Country}, {airport.AirportName}";
                        <MudSelectItem Value="airport">@choiceItem</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Travel Dates Section -->
            <MudItem xs="12" sm="6" md="3">
                <MudStack>
                    <MudDateRangePicker @ref="_picker" Label="Travel Dates" @bind-DateRange="_dateRange"
                                        AutoClose="true" PickerVariant="PickerVariant.Dialog" Color="Color.Warning">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
                            <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                </MudStack>
            </MudItem>
            <MudSpacer />
            <!-- Find Flights Button -->
            <MudItem xs="12" sm="12" md="1" Align="Align.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Warning"
                           OnClick="FindFlights"
                           Disabled="@destEmpty">
                    Search Flights
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="12" md="1" Align="Align.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary"
                            OnClick="ViewAllFlights">
                    All Flights
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudContainer>



<br />
<!-- Trending Destinations Section -->
<MudContainer Class="trending-section">
    <MudStack Direction="Row" JustifyContent="SpaceBetween">
        <!-- Title -->
        <MudText Typo="Typo.h5" Class="trending-title">
            Trending destinations
        </MudText>
        <!-- Divider -->
        <MudDivider Class="blue-line" />
    </MudStack>
</MudContainer>


<!-- Flights Section -->
<!-- Flights Section -->
<MudContainer>
    <div class="card-container">
        
        @foreach (var flight in flights)
        {
            count++;
            string imgSrc = $"IMG{count}.jpg";
            string route = $"{flight.SourceAirportName} to {flight.DestinationAirportName}";
            <MudCard Class="card-item">
                <MudCardMedia Image="@imgSrc" Title="@flight.SourceAirportName" Class="card-image" />
                <MudCardContent>
                    <MudText Typo="Typo.h6">@route</MudText>
                    <MudText Typo="Typo.body2">@flight.ScheduledDepartureDate.ToString("dd / MM / yyyy")</MudText>
                    <MudText Typo="Typo.h6">From OMR @flight.Cost</MudText>
                    <MudButton Color="Color.Info" >Book now</MudButton>
                </MudCardContent>
            </MudCard>
            if (count == 4)
            {
                count = 0;
                break;
            }
        }
    </div>
</MudContainer>


@code {
    private int count = 0;
    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(30).Date);
    private bool _autoClose;

    private bool IsDatePickerOpen = false; 
    private DateTime? TravelDate = DateTime.Today; 
    private string TravelDateText => TravelDate?.ToShortDateString() ?? "Select your travel date";
    private void ToggleDatePicker()
    {
        IsDatePickerOpen = !IsDatePickerOpen;
    }
    private AirportOutputDTO FromLocation;
    private AirportOutputDTO ToLocation;

    bool originEmpty = true;
    bool destEmpty = true;
    private void OnOriginSelected(AirportOutputDTO airport)
    {
        if (airport != null)
        {
            FromLocation = airport;
            // Filter destination airports, excluding the selected origin airport
            airportsDest = airports.Where(a => a.AirportName != FromLocation.AirportName).ToList();
            originEmpty = false;

            // Optional: Log or update UI
            Console.WriteLine($"Origin selected: {FromLocation.City}, {FromLocation.Country}, {FromLocation.AirportName}");
        }
        else
        {
            originEmpty = true;
            airportsDest = airports; // Reset to all airports
        }
    }

    private void OnDestSelected(AirportOutputDTO airport)
    {
        if (airport != null)
        {
            ToLocation = airport;
            // Filter destination airports, excluding the selected origin airport
            airportsOrigin = airports.Where(a => a.AirportName != ToLocation.AirportName).ToList();
            destEmpty = false;

            // Optional: Log or update UI
            Console.WriteLine($"Destination selected: {ToLocation.City}, {ToLocation.Country}, {ToLocation.AirportName}");
        }
        else
        {
            destEmpty = true;
            airportsOrigin = airports; // Reset to all airports
        }
    }

    private List<AirportOutputDTO> airports = new List<AirportOutputDTO>();
    private List<AirportOutputDTO> airportsOrigin = new List<AirportOutputDTO>();
    private List<AirportOutputDTO> airportsDest = new List<AirportOutputDTO>();
    private List<FlightOutputDTO> flights = new List<FlightOutputDTO>();

    protected override void OnInitialized()
    {
        airports = airportService.GetAllAirports();
        airportsOrigin = airports.ToList();
        flights = flightService.GetAllFlights();
    }



    private void FindFlights()
    {
        if (string.IsNullOrWhiteSpace(FromLocation.AirportName) || string.IsNullOrWhiteSpace(ToLocation.AirportName))
        {
            Console.WriteLine("Please fill in all fields before searching.");
        }
        else
        {
            var startDate = _dateRange.Start?.ToString("yyyy-MM-dd");
            var endDate = _dateRange.End?.ToString("yyyy-MM-dd");
            navManager.NavigateTo($"/flights?origin={FromLocation.AirportName}&dest={ToLocation.AirportName}&startdate={startDate}&enddate={endDate}");
        }
    }

    private void ViewAllFlights()
    {
        navManager.NavigateTo("/flights");
    }
}
<style>
    .carousel-image {
        background-position: center 30%;
        background-repeat: no-repeat;
        background-size: cover;
        bottom: 0;


        position: sticky;
        top: 0;

        width: 100%;
    }

    .text-overlay {
        position: absolute;
        top: 50%; /* Center vertically */
        left: 50%; /* Center horizontally */
        transform: translate(-50%, -50%); /* Adjust for exact centering */
        color: white; /* Text color */
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8); /* Add shadow to text */
        padding: 10px 20px; /* Add some padding around the text */
        border-radius: 10px; /* Optional: Rounded corners */
        text-align: center;
        z-index: 2; /* Ensure the text appears above the image */
        white-space: nowrap; /* Prevent text wrapping */
    }
  
    .mud-carousel
    {
        border-radius: 0 0 20px 20px;
        height: 500px;
        margin: 0;
        padding: 0 20%;
        overflow: hidden;
        min-width: 1500px;
        align-self: center ;
    }


    

    .card-image {
        height: 150px;
        object-fit: cover;
        border-radius: 4px; 
    } 



    .search-section {
        margin: 16px 0; 
    }

    .carousel-container {
        padding: 0 !important;
        margin: 0 !important;
    }

   

    .trending-section {
        margin-bottom: 24px; 
    }


    .search-wrapper {
        display: flex;
        justify-content: center;
        margin-top: -80px;
        padding: 0;
    }

    .search-section {
        width: 100%;
        padding: 40px; 
        background-color: rgba(244, 244, 244, 0.98);
        backdrop-filter: blur(5px);
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); 
        border-radius: 10px; 
        z-index: 4;
    }
  
    .card-container {
        display: flex;
        justify-content: space-between; 
        align-items: center;
        flex-wrap: nowrap; 
        gap: 20px; 

        padding: 0;
    }

    .card-item {
        width: 300px;
        margin: 0; 
        background-color: rgba(244, 244, 244, 0.98);
        backdrop-filter: blur(5px);
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .card-image {
        height: 150px;
        object-fit: cover;
        border-radius: 4px; 
    }


    body {
        margin-top: -64px;
        
        height: 100vh; 
    }

</style>


