@page "/"
<PageTitle>Home</PageTitle>
<MudContainer Class="search-wrapper">
    <MudContainer Class="search-section">
        <MudGrid Gutter="2" AlignItems="Center" JustifyContent="SpaceBetween">
            <!-- From Section -->
            <MudItem xs="12" sm="6" md="3">
                <MudAutocomplete T="string" Label="From"
                                 Placeholder="Enter Departure Location"
                                 @bind-Value="FromLocation"
                                 SearchFunc="@SearchFromLocations"
                                 ToStringFunc="@(e => e ?? "")">
                    <NoItemsTemplate>
                        <MudText Align="Align.Center" Class="px-4 py-1">
                            No locations found
                        </MudText>
                    </NoItemsTemplate>
                </MudAutocomplete>
            </MudItem>

            <!-- Where To Section -->
            <MudItem xs="12" sm="6" md="3">
                <MudAutocomplete T="string" Label="Where To"
                                 Placeholder="Enter Destination Location"
                                 @bind-Value="ToLocation"
                                 SearchFunc="@SearchToLocations"
                                 ToStringFunc="@(e => e ?? "")">
                    <NoItemsTemplate>
                        <MudText Align="Align.Center" Class="px-4 py-1">
                            No locations found
                        </MudText>
                    </NoItemsTemplate>
                </MudAutocomplete>
            </MudItem>

            <!-- Travel Dates Section -->
            <MudItem xs="12" sm="6" md="3">
                <MudStack>
                    <MudDateRangePicker @ref="_picker" Label="Travel Dates" @bind-DateRange="_dateRange"
                                        AutoClose="true" PickerVariant="PickerVariant.Dialog">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Clear</MudButton>
                            <MudButton OnClick="@(() => _picker.CloseAsync(false))">Cancel</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Ok</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                </MudStack>
            </MudItem>

            <!-- Find Flights Button -->
            <MudItem xs="12" sm="12" md="1" Align="Align.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="FindFlights">
                    Find Flights
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudContainer>

<!-- Add break tags for spacing -->
<br />
<br />

<!-- Carousel Section -->
<MudContainer Class="carousel-container">
    <MudCarousel Class="mud-width-full" Style="height:300px;" TData="object">
        <MudCarouselItem Transition="@Transition.Slide" Color="@Color.Primary">
            <MudImage Src="IMG_0395.jpg" Class="carousel-image" />
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Slide" Color="@Color.Secondary">
            <MudImage Src="IMG_0394.jpg" Class="carousel-image" />
        </MudCarouselItem>
        <MudCarouselItem Transition="@Transition.Slide">
            <MudImage Src="IMG_0396.jpg" Class="carousel-image" />
        </MudCarouselItem>
    </MudCarousel>
</MudContainer>

<br />
<br />
<!-- Trending Destinations Section -->
<MudContainer Class="trending-section">
    <MudStack Direction="Row" JustifyContent="SpaceBetween">
        <!-- Title -->
        <MudText Typo="Typo.h5" Class="trending-title">
            Trending destinations
        </MudText>
        <!-- Divider -->
        <MudDivider Class="blue-line" />
    </MudStack>
</MudContainer>


<!-- Flights Section -->
<!-- Flights Section -->
<MudContainer>
    <div class="card-container">
        @foreach (var flight in flights)
        {
            <MudCard Class="card-item">
                <MudCardMedia Image="@flight.ImageUrl" Title="@flight.Route" Class="card-image" />
                <MudCardContent>
                    <MudText Typo="Typo.h6">@flight.Route</MudText>
                    <MudText Typo="Typo.body2">@flight.DepartureDate</MudText>
                    <MudText Typo="Typo.h6">From OMR @flight.Price</MudText>
                    <MudButton Color="Color.Primary" OnClick="@(() => BookFlight(flight))">Book now</MudButton>
                </MudCardContent>
            </MudCard>
        }
    </div>
</MudContainer>



@code {
    private List<Flight> flights = new List<Flight>
    {
        new Flight { Route = "Muscat (MCT) to Manila (MNL)", DepartureDate = "Departing: 11/05/2025", Price = "146", ImageUrl = "IMG_0404.jpg"  },
        new Flight { Route = "Khasab (KHS) to Muscat (MCT)", DepartureDate = "Departing: 24/01/2025", Price = "18", ImageUrl = "IMG_0403.jpg"},
        new Flight { Route = "Muscat (MCT) to Dhaka (DAC)", DepartureDate = "Departing: 07/02/2025", Price = "52", ImageUrl = "IMG_0406.jpg" },
        new Flight { Route = "Muscat (MCT) to Kuala Lumpur (KUL)", DepartureDate = "Departing: 08/03/2025", Price = "82", ImageUrl = "IMG_0405.jpg" }
    };

    private void BookFlight(Flight flight)
    {
        // Handle flight booking logic
        Console.WriteLine($"Booking flight: {flight.Route}");
    }

    public class Flight
    {
        public string Route { get; set; }
        public string DepartureDate { get; set; }
        public string Price { get; set; }
        public string ImageUrl { get; set; }
    }
}
@code {
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
}
@code {
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
}
@code {
    private bool IsDatePickerOpen = false; // To manage the visibility of the date picker
    private DateTime? TravelDate = DateTime.Today; // Bound to the selected travel date
    private string TravelDateText => TravelDate?.ToShortDateString() ?? "Select your travel date";
    private void ToggleDatePicker()
    {
        IsDatePickerOpen = !IsDatePickerOpen; // Toggle the visibility of the date picker
    }
    private string FromLocation; // Bound to the "From" location field
    private string ToLocation;   // Bound to the "Where To" location field
    private decimal? Cost;       // Bound to the cost field
    private async Task<IEnumerable<string>> SearchFromLocations(string value, CancellationToken token)
    {
        var locations = new List<string>
        {
            "Muscat, Oman (MCT)",
            "Abu Dhabi, United Arab Emirates (AUH)",
            "Accra, Ghana (ACC)",
            "Addis Ababa, Ethiopia (ADD)"
        };
        return await Task.FromResult(locations
            .Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase))
            .Take(5));
    }
    private async Task<IEnumerable<string>> SearchToLocations(string value, CancellationToken token)
    {
        var locations = new List<string>
        {
            "Dubai, United Arab Emirates (DXB)",
            "Doha, Qatar (DOH)",
            "Kigali, Rwanda (KGL)",
            "Nairobi, Kenya (NBO)"
        };
        return await Task.FromResult(locations
            .Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase))
            .Take(5));
    }
    private void FindFlights()
    {
        if (string.IsNullOrWhiteSpace(FromLocation) || string.IsNullOrWhiteSpace(ToLocation) || Cost is null)
        {
            Console.WriteLine("Please fill in all fields before searching.");
            return;
        }
        Console.WriteLine($"Searching flights from {FromLocation} to {ToLocation} on {TravelDate?.ToShortDateString()} with a cost limit of {Cost}.");
    }
}
<style>
    .carousel-image {
        width: 100%;
        height: 400px; /* Matches carousel height */
        object-fit: cover; /* Ensures no image distortion */
    }

   /*  .card-container {
        margin: 0 auto;
        padding: 16px;
        display: flex;
        justify-content: space-around; /* Evenly spaces the cards */
        flex-wrap: wrap; /* Ensures responsiveness */
    }

    .card-item {
        width: 250px; /* Fixes card width */
        margin: 16px; /* Adds spacing between cards */
    }

    .card-image {
        height: 150px;
        object-fit: cover;
        border-radius: 4px; /* Optional for rounded corners */
    } */



    .search-section {
        margin: 16px 0; /* Adds spacing between search section and carousel */
    }

    .carousel-container {
        margin-bottom: 50px; /* Adds space below the carousel */
      
    }

   

    .trending-section {
        margin-bottom: 24px; /* Adds space below the title and divider */
    }


    .search-wrapper {
        display: flex; /* Enables flexbox layout */
        justify-content: center; /* Centers the search section horizontally */
        margin-top: 50px; /* Adds space from the top of the page */
    }

    .search-section {
        width: 80%; /* Adjust the width of the search section */
        max-width: 1200px; /* Prevent it from growing too large */
        padding: 16px; /* Adds some padding */
        background-color:lightgrey; /* Optional: Light background color */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Optional: Subtle shadow */
        border-radius: 20px; /* Optional: Rounded corners */
    }
    /* Ensure cards are centered and in one horizontal line */
    .card-container {
        display: flex; /* Use flexbox to align items */
        justify-content: center; /* Center the cards horizontally */
        align-items: center; /* Center items vertically if needed */
        flex-wrap: nowrap; /* Prevent wrapping to multiple lines */
        margin: 20px auto; /* Center the container with some spacing */
        max-width: 90%; /* Optional: Limit the width of the container */
        gap: 20px; /* Space between cards */
    }

    .card-item {
        width: 250px; /* Fixed width for each card */
        margin: 0; /* Reset margins */
    }

    .card-image {
        height: 150px;
        object-fit: cover;
        border-radius: 4px; /* Optional rounded corners */
    }


    body {
        background-image: url("K.jpg");
        background-size: cover; 
        background-position: center;
        background-repeat: no-repeat; 
        height: 100vh; 
        margin: 0; 
    }

</style>


