@page "/AddFlight"
@layout Layout.AdminLayout
@inject IAirportService airportService
@inject IAirplaneService airplaneService
@inject IFlightService flightService
@inject ICompoundService compoundService
@inject NavigationManager NavigationManager
@using MudBlazor

@* @attribute [Authorize(Roles = "admin")] *@
<MudContainer Class="add-flight-container">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-4">Add New Flight</MudText>

    <MudForm @ref="flightForm" OnValidSubmit="HandleValidSubmit">
        <!-- Source Airport -->
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="AirportOutputDTO"
                           Value="FromLocation"
                           Variant="Variant.Filled"
                           Label="Origin"
                           Margin="Margin.None"
                           Dense="false"
                           Disabled="false"
                           ReadOnly="false"
                           Required="true"
                           Placeholder="Select origin"
                           ValueChanged="OnOriginSelected">
                           
                    @foreach (var airport in airportsOrigin)
                    {
                        string choiceItem = $"{airport.City}, {airport.Country}, {airport.AirportName}";
                        <MudSelectItem Value="airport">@choiceItem</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            
        </MudGrid>

        <!-- Destination Airport -->
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="AirportOutputDTO"
                           Value="ToLocation"
                           Variant="Variant.Filled"
                           Label="Destination"
                           Margin="Margin.None"
                           Dense="false"
                           ReadOnly="false"
                           Required="true"
                           Disabled="@originEmpty"
                           Placeholder="@("Select Destination")"
                           ValueChanged="OnDestSelected">
                    @foreach (var airport in airportsDest)
                    {
                        string choiceItem = $"{airport.City}, {airport.Country}, {airport.AirportName}";
                        <MudSelectItem Value="airport">@choiceItem</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Airplane ID -->
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="AirplaneOutputDto"
                           Value="selectedAirplane"
                           Variant="Variant.Filled"
                           Label="Airplane"
                           Margin="Margin.None"
                           Dense="false"
                           ReadOnly="false"
                           Required="true"
                           Disabled="@originEmpty"
                           Placeholder="@("Select Airplane")"
                           ValueChanged="OnAirplaneSelected">
                    @foreach (var airplane in airplanes)
                    {
                        string choiceItem = $"ID: {airplane.AirplaneId}| Model: {airplane.AirplaneModel}| Manufactured on: {airplane.ManufactureDate}";
                        <MudSelectItem Value="airplane">@choiceItem</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Flight Cost -->
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Flight Cost (OMR)"
                              @bind-Value="flightInput.Cost"
                              Type="Number"
                              Required="true"
                              For="@(() => flightInput.Cost)" />
            </MudItem>
        </MudGrid>

        
        <!-- Scheduled Departure Date -->
        <MudGrid>
            <MudItem xs="12">
                <MudDatePicker Label="Scheduled Departure Date" @bind-Date="dateInput" Required="true" Class="mb-3" />
            </MudItem>
            <MudItem xs="12">
                <MudTimePicker Label="Scheduled Departure Time" @bind-Time="timeInput" Required="true" Class="mb-3" />
            </MudItem>
        </MudGrid>

        <!-- Submit Button -->
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit" FullWidth="true">
                    Add Flight
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>

    <MudSpacer />

    <MudGrid Style="justify-content: center;" Class="mt-4">
        <MudItem xs="4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ReturnToPreviousPage" FullWidth="true">
                Return
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private FlightControllerInput flightInput = new FlightControllerInput();
    private MudForm flightForm;
    private DateTime? dateInput = null;
    private TimeSpan? timeInput = null;
    private List<AirplaneOutputDto> airplanes = new List<AirplaneOutputDto>();
    private List<AirportOutputDTO> airports = new List<AirportOutputDTO>();
    private List<AirportOutputDTO> airportsOrigin = new List<AirportOutputDTO>();
    private List<AirportOutputDTO> airportsDest = new List<AirportOutputDTO>();

    protected override void OnInitialized()
    {
        airports = airportService.GetAllAirports();
        airportsOrigin = airports.ToList();
    }
    private AirportOutputDTO FromLocation;
    private AirportOutputDTO ToLocation;
    private AirplaneOutputDto selectedAirplane;
    bool originEmpty = true;
    bool destEmpty = true;
    private void OnOriginSelected(AirportOutputDTO airport)
    {
        if (airport != null)
        {
            FromLocation = airport;
            // Filter destination airports, excluding the selected origin airport
            airportsDest = airports.Where(a => a.AirportName != FromLocation.AirportName).ToList();
            airplanes = airplaneService.GetAll().Where(a => a.CurrentAirportId == FromLocation.AirportId).ToList();
            originEmpty = false;

            // Optional: Log or update UI
            Console.WriteLine($"Origin selected: {FromLocation.City}, {FromLocation.Country}, {FromLocation.AirportName}");
        }
        else
        {
            originEmpty = true;
            airportsDest = airports; // Reset to all airports
        }
    }

    private void OnDestSelected(AirportOutputDTO airport)
    {
        if (airport != null)
        {
            ToLocation = airport;
            // Filter destination airports, excluding the selected origin airport
            airportsOrigin = airports.Where(a => a.AirportName != ToLocation.AirportName).ToList();
            destEmpty = false;

            // Optional: Log or update UI
            Console.WriteLine($"Destination selected: {ToLocation.City}, {ToLocation.Country}, {ToLocation.AirportName}");
        }
        else
        {
            destEmpty = true;
            airportsOrigin = airports; // Reset to all airports
        }
    }
    private void OnAirplaneSelected(AirplaneOutputDto airplane)
    {
        selectedAirplane = airplane;
    }
    // Handle form submission
    private async Task HandleValidSubmit()
    {
        try
        {
            
            flightInput.AirplaneId = selectedAirplane.AirplaneId;
            flightInput.SourceAirportName = FromLocation.AirportName;
            flightInput.DestinationAirportName = ToLocation.AirportName;
            flightInput.ScheduledDepartureDate = dateInput.Value.Add(timeInput.Value);

            // Call the service to add the new flight (implement this in your flight service)
            compoundService.ClaculateFlightInputDuration(flightInput);

            // Redirect to the flight list page (or success page)
            NavigationManager.NavigateTo("/ViewFlightToAdmin");
        }
        catch (Exception ex)
        {
            // Handle any errors during submission (e.g., show a notification or error message)
            Log.Debug($"Error adding flight: {ex.Message}");
        }
    }

    // Return to the previous page (home or flight list)
    private void ReturnToPreviousPage()
    {
        NavigationManager.NavigateTo("/ViewFlightToAdmin");
    }
}
