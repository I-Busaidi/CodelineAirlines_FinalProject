@page "/EditFlight/{FlightNo}"
@layout Layout.AdminLayout
@inject IFlightService flightService
@inject IAirplaneService airplaneService
@inject ICompoundService compoundService
@inject NavigationManager NavigationManager
@using MudBlazor
@* @attribute [Authorize(Roles = "admin")] *@
<MudContainer Class="edit-flight-container">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-4">Edit Flight</MudText>

    <MudForm @ref="flightForm" OnValidSubmit="HandleValidSubmit">
        <!-- Airplane ID -->
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="AirplaneOutputDto"
                           Value="selectedAirplane"
                           Variant="Variant.Filled"
                           Label="Airplane"
                           Margin="Margin.None"
                           Dense="false"
                           ReadOnly="false"
                           Required="true"
                           Placeholder="@("Select Airplane")"
                           ValueChanged="OnAirplaneSelected">
                    @foreach (var airplane in airplanes)
                    {
                        string choiceItem = $"ID: {airplane.AirplaneId}| Model: {airplane.AirplaneModel}| Manufactured on: {airplane.ManufactureDate}";
                        <MudSelectItem Value="airplane">@choiceItem</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <!-- Scheduled Departure Date -->
        <MudGrid>
            <MudItem xs="12">
                <MudDatePicker Label="Scheduled Departure Date" @bind-Date="dateInput" Required="true" Class="mb-3" />
            </MudItem>
            <MudItem xs="12">
                <MudTimePicker Label="Scheduled Departure Time" @bind-Time="timeInput" Required="true" Class="mb-3" />
            </MudItem>
        </MudGrid>

        <!-- Submit Button -->
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleValidSubmit" FullWidth="true">
                    Save Changes
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>

    <MudSpacer />

    <MudGrid Style="justify-content: center;" Class="mt-4">
        <MudItem xs="4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ReturnToPreviousPage" FullWidth="true">
                Return
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string FlightNo { get; set; }
    private List<AirplaneOutputDto> airplanes = new List<AirplaneOutputDto>();
    private AirplaneOutputDto selectedAirplane;
    private DateTime? dateInput = null;
    private TimeSpan? timeInput = null;
    private FlightInputDTO flightInput = new FlightInputDTO();
    private MudForm flightForm;
    private Models.Flight flight = new Models.Flight();
    // Load flight details when the page is initialized
    protected override void OnInitialized()
    {
        flight = flightService.GetFlightByIdWithRelatedData(int.Parse(FlightNo));
        airplanes = airplaneService.GetAll().Where(a => a.CurrentAirportId == flight.SourceAirportId).ToList();
    }
    private void OnAirplaneSelected(AirplaneOutputDto airplane)
    {
        selectedAirplane = airplane;
    }
    // Handle form submission to update flight details
    private void HandleValidSubmit()
    {
        try
        {
            if (flight != null)
            {
                // Populate the form with existing flight details
                flightInput.AirplaneId = selectedAirplane.AirplaneId;
                flightInput.ScheduledDepartureDate = dateInput.Value.Add(timeInput.Value);
            }
            // Call the service to update the flight details (only AirplaneId and ScheduledDepartureDate)
            compoundService.RescheduleFlight(int.Parse(FlightNo), flightInput.ScheduledDepartureDate, flightInput.AirplaneId);

            // Redirect to the flight list page (or success page)
            NavigationManager.NavigateTo("/ViewFlightToAdmin"); 
        }
        catch (Exception ex)
        {
            // Handle any errors during submission
            Log.Error($"Error updating flight: {ex.Message}");
        }
    }

    // Return to the previous page (flight list or home)
    private void ReturnToPreviousPage()
    {
        NavigationManager.NavigateTo("/ViewFlightToAdmin"); // Navigate to the previous page (or home)
    }
}
